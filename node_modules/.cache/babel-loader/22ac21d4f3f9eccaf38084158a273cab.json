{"ast":null,"code":"var _jsxFileName = \"/Users/leftee/Documents/GitHub/transcript_ashesi_/src/Components/SideForm/InputForm.js\";\nimport React, { useState, Component, useCallback, useEffect } from \"react\";\nimport DragAndDrop from \"../DragAndDrop\";\nimport { createExperiece } from \"../../Redux/actions/experienceActions\";\nimport { connect } from \"react-redux\"; // cuid is a simple library to generate unique IDs\n\nimport cuid from \"cuid\";\nimport \"./InputForm.css\";\nimport { Highlight } from \"@material-ui/icons\";\nimport UploadedImage from \"../UploadedImage\"; // import { Component } from \"react\";\n// function InputForm() {\n//     return (\n//         <div>\n//             this is the form section\n//         </div>\n//     )\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass InputForm extends Component {\n  render() {\n    this.state = {\n      hours: \"\",\n      refName: \"\",\n      refContact: \"\",\n      year: \"2018\",\n      category: \"SCHOLARSHIP\",\n      isHighlight: false,\n      image_: \"\"\n    }; // const [discription, setDiscriptiion] = useState(\"\"); //add all the elemetns later\n    // const [hours, setHours] = useState(\"\");\n    // const [refName, setRefName] = useState(\"\");\n    // const [refContact, setRefContact] = useState(\"\");\n    // const [year, setYear] = useState(\"2018\");\n    // const [category, setCategory] = useState(\"SCHORLASHIP\");\n    // const [tempImage,setTempImage] = useState(\"\");\n    // const [isHighlight, setIsHighlight] = useState(false);\n    // const [isImage,setIsImage]=useState(false);\n    // const [image_, setImage] = useState([]); //   const [isHighlight, setHighlight] = useState(false); //false\n    // const onDrop = useCallback((acceptedFiles) => {\n    //   // Loop through accepted files\n    //   acceptedFiles.map((file) => {\n    //     // Initialize FileReader browser API\n    //     const reader = new FileReader();\n    //     // onload callback gets called after the reader reads the file data\n    //     reader.onload = function (e) {\n    //       // add the image into the state. Since FileReader reading process is asynchronous, its better to get the latest snapshot state (i.e., prevState) and update it.\n    //       setImage((prevState) => [\n    //         ...prevState,\n    //         { id: cuid(), src: e.target.result },\n    //       ]);\n    //       setIsImage(true);\n    //       //  console.log(image_);\n    //       setTempImage(e.target.result)\n    //     };\n    //     // Read the file as Data URL (since we accept only images)\n    //     reader.readAsDataURL(file);\n    //     // setIsImage(true);\n    //     return file;\n    //   });\n    // }, []);\n\n    const handleSubmit = e => {\n      e.preventDefault();\n      const experience = {\n        year,\n        category,\n        discription,\n        hours,\n        refName,\n        refContact,\n        isHighlight,\n        id: cuid()\n      }; //add all the form fields here\n      // console.log(\"jhgfhgfdhgfdhgf\")\n      // console.log(image_)\n      // const image={\n      //   uid,\n      //   eid,\n      //   iLink:image_,\n      //   id:cuid()\n      // }\n\n      this.props.createExperiece(this.experience); // fetch(\"http://localhost:8000/experiences/\", {\n      //   method: \"POST\",\n      //   headers: { \"Content-Type\": \"application/json\" },\n      //   body: JSON.stringify(experience),\n      // }).then(() => {\n      //   console.log(\"uploaded to server succesfully\");\n      //   //what to do next....eg: history.push('/');\n      // });\n      // fetch(\"//http://localhost:8000/images/\", {\n      //   method: \"POST\",\n      //   headers: { \"Content-Type\": \"application/json\" },\n      //   body: JSON.stringify(image),\n      // }).then(() => {\n      //   console.log(\"uploaded to server succesfully\");\n      //   //what to do next....eg: history.push('/');\n      // });\n    }; // useEffect(()=>{\n    //   console.log(\"this happened because of image\");\n    //   console.log(image_);\n    // },[image_])\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"FormInput\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Transcript Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"\",\n          children: \"Year:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: this.state.year,\n          onChange: e => this.setState({\n            year: e.target.value\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"year1\",\n            children: \"2018\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"year2\",\n            children: \"2019\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"year3\",\n            children: \"2020\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"year4\",\n            children: \"2021\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"\",\n          children: \"Category:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: this.state.category,\n          onChange: e => this.setState({\n            category: e.target.value\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"cat1\",\n            children: \"LEADERSHIP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"cat2\",\n            children: \"CITIZENSHIP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"cat3\",\n            children: \"SCHOLARSHIP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"\",\n          children: \"Brief Discription:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          required: true,\n          maxLength: \"120\",\n          value: this.state.discription,\n          onChange: e => this.setState({\n            discription: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"\",\n          children: \"Number of Hours:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          required: true,\n          value: this.state.hours,\n          onChange: e => this.setState({\n            hours: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"\",\n          children: \"Reference Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          required: true,\n          value: this.state.refName,\n          onChange: e => this.setState({\n            refName: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"\",\n          children: \"Reference Contact:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          required: true,\n          maxLength: \"40\",\n          value: this.state.refContact,\n          onChange: e => this.setState({\n            refContact: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"\",\n          children: \"Add as a major Highlight:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"switch\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            value: this.state.isHighlight,\n            onChange: e => this.setState({\n              isHighlight: prevState => !prevState\n            }) //(e.target.value)}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"slider round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 9\n        }, this), this.state.isHighlight && /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Add to transcript\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    createExperiece: experience => dispatch(createExperiece(experience))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(InputForm);","map":{"version":3,"sources":["/Users/leftee/Documents/GitHub/transcript_ashesi_/src/Components/SideForm/InputForm.js"],"names":["React","useState","Component","useCallback","useEffect","DragAndDrop","createExperiece","connect","cuid","Highlight","UploadedImage","InputForm","render","state","hours","refName","refContact","year","category","isHighlight","image_","handleSubmit","e","preventDefault","experience","discription","id","props","setState","target","value","prevState","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React,{ useState, Component,useCallback, useEffect } from \"react\";\nimport DragAndDrop from \"../DragAndDrop\";\nimport { createExperiece } from \"../../Redux/actions/experienceActions\";\nimport { connect } from \"react-redux\";\n// cuid is a simple library to generate unique IDs\nimport cuid from \"cuid\";\nimport \"./InputForm.css\";\nimport { Highlight } from \"@material-ui/icons\";\nimport UploadedImage from \"../UploadedImage\";\n// import { Component } from \"react\";\n\n// function InputForm() {\n//     return (\n//         <div>\n//             this is the form section\n//         </div>\n//     )\n// }\n\nclass InputForm extends Component {\n  render(){\n    this.state={\n      hours:\"\",\n      refName:\"\",\n      refContact:\"\",\n      year:\"2018\",\n      category:\"SCHOLARSHIP\",\n      isHighlight:false,\n      image_:\"\"\n    };\n// const [discription, setDiscriptiion] = useState(\"\"); //add all the elemetns later\n  // const [hours, setHours] = useState(\"\");\n  // const [refName, setRefName] = useState(\"\");\n  // const [refContact, setRefContact] = useState(\"\");\n  // const [year, setYear] = useState(\"2018\");\n  // const [category, setCategory] = useState(\"SCHORLASHIP\");\n  // const [tempImage,setTempImage] = useState(\"\");\n\n  // const [isHighlight, setIsHighlight] = useState(false);\n  // const [isImage,setIsImage]=useState(false);\n  // const [image_, setImage] = useState([]); //   const [isHighlight, setHighlight] = useState(false); //false\n\n  // const onDrop = useCallback((acceptedFiles) => {\n  //   // Loop through accepted files\n  //   acceptedFiles.map((file) => {\n  //     // Initialize FileReader browser API\n  //     const reader = new FileReader();\n  //     // onload callback gets called after the reader reads the file data\n  //     reader.onload = function (e) {\n  //       // add the image into the state. Since FileReader reading process is asynchronous, its better to get the latest snapshot state (i.e., prevState) and update it.\n  //       setImage((prevState) => [\n  //         ...prevState,\n  //         { id: cuid(), src: e.target.result },\n  //       ]);\n  //       setIsImage(true);\n  //       //  console.log(image_);\n  //       setTempImage(e.target.result)\n\n  //     };\n  //     // Read the file as Data URL (since we accept only images)\n  //     reader.readAsDataURL(file);\n  //     // setIsImage(true);\n  //     return file;\n  //   });\n  // }, []);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const experience = {\n \n      year,\n      category,\n      discription,\n      hours,\n      refName,\n      refContact,\n      isHighlight,\n      id:cuid()\n   \n      \n    }; //add all the form fields here\n    // console.log(\"jhgfhgfdhgfdhgf\")\n    // console.log(image_)\n    // const image={\n    //   uid,\n    //   eid,\n    //   iLink:image_,\n    //   id:cuid()\n\n    // }\n    this.props.createExperiece(this.experience)\n    \n\n    // fetch(\"http://localhost:8000/experiences/\", {\n    //   method: \"POST\",\n    //   headers: { \"Content-Type\": \"application/json\" },\n    //   body: JSON.stringify(experience),\n    // }).then(() => {\n    //   console.log(\"uploaded to server succesfully\");\n    //   //what to do next....eg: history.push('/');\n    // });\n\n    // fetch(\"//http://localhost:8000/images/\", {\n    //   method: \"POST\",\n    //   headers: { \"Content-Type\": \"application/json\" },\n    //   body: JSON.stringify(image),\n    // }).then(() => {\n    //   console.log(\"uploaded to server succesfully\");\n    //   //what to do next....eg: history.push('/');\n    // });\n\n  };\n\n    // useEffect(()=>{\n    //   console.log(\"this happened because of image\");\n    //   console.log(image_);\n    // },[image_])\n\n  return (\n    <div className=\"FormInput\">\n      <h3>Transcript Data</h3>\n      <form className=\"\" onSubmit={handleSubmit}>\n        <label className=\"\">Year:</label>\n        <select value={this.state.year} onChange={(e) => this.setState({year:e.target.value})}>\n          <option value=\"year1\">2018</option>\n          <option value=\"year2\">2019</option>\n          <option value=\"year3\">2020</option>\n          <option value=\"year4\">2021</option>\n        </select>\n        <label className=\"\">Category:</label>\n        <select value={this.state.category} onChange={(e) => this.setState({category:e.target.value})}>\n          <option value=\"cat1\">LEADERSHIP</option>\n          <option value=\"cat2\">CITIZENSHIP</option>\n          <option value=\"cat3\">SCHOLARSHIP</option>\n        </select>\n        <label className=\"\">Brief Discription:</label>\n        <input\n          type=\"text\"\n          required\n          maxLength={\"120\"}\n          value={this.state.discription}\n          onChange={(e) => this.setState({discription:e.target.value})}\n        />\n        <label className=\"\">Number of Hours:</label>\n        <input\n          type=\"number\"\n          required\n          value={this.state.hours}\n          onChange={(e) => this.setState({hours:e.target.value})}\n        />\n        <label className=\"\">Reference Name:</label>\n        <input\n          type=\"text\"\n          required\n          value={this.state.refName}\n          onChange={(e) => this.setState({refName:e.target.value})}\n        />\n        <label className=\"\">Reference Contact:</label>\n        <input\n          type=\"email\"\n          required\n          maxLength={\"40\"}\n          value={this.state.refContact}\n          onChange={(e) => this.setState({refContact:e.target.value})}\n        />\n        <label className=\"\">Add as a major Highlight:</label>\n        <label className=\"switch\">\n          <input\n            type=\"checkbox\"\n            value={this.state.isHighlight}\n            onChange={(e) => this.setState({isHighlight:(prevState) => !prevState})} //(e.target.value)}\n          />\n          <span className=\"slider round\"></span>\n        </label>\n\n        {this.state.isHighlight && (\n          <div>\n            {/* <DragAndDrop onChange={(e)=>setImage(e.target.value)} onDrop={onDrop} accept={\"image/*\"} /> */}\n            {/* {isImage && <UploadedImage image={temp}/>} */}\n          </div>\n           \n        )}\n        \n\n        {/* <label className=\"\">Add Data to Transcript</label> */}\n        <button>Add to transcript</button>\n      </form>\n    </div>\n  );\n};\n  }\n  \nconst mapDispatchToProps=(dispatch)=>{\n   return{\n     createExperiece :(experience)=>dispatch(createExperiece(experience))\n   }\n}\nexport default connect(null,mapDispatchToProps)(InputForm);\n"]},"metadata":{},"sourceType":"module"}