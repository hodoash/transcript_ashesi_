{"ast":null,"code":"var _jsxFileName = \"/Users/leftee/Documents/GitHub/transcript_ashesi_/src/Components/SideForm/InputForm.js\";\nimport React, { Component, useState } from \"react\";\nimport DragAndDrop from \"../DragAndDrop\";\nimport { createExperiece } from \"../../Redux/actions/experienceActions\";\nimport { connect } from \"react-redux\"; // cuid is a simple library to generate unique IDs\n\nimport cuid from \"cuid\";\nimport \"./InputForm.css\";\nimport { Highlight } from \"@material-ui/icons\";\nimport UploadedImage from \"../UploadedImage\"; // import { Component } from \"react\";\n// function InputForm() {\n//     return (\n//         <div>\n//             this is the form section\n//         </div>\n//     )\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass InputForm extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.render = () => () => {\n      var _s = $RefreshSig$();\n\n      return _s(() => {\n        _s();\n\n        // this.state={\n        //   hours:\"\",\n        //   refName:\"\",\n        //   discription:\"\",\n        //   refContact:\"\",\n        //   year:\"2018\",\n        //   category:\"SCHOLARSHIP\",\n        //   isHighlight:false,\n        //   //image_:\"\"\n        // };\n        const [discription, setDiscriptiion] = useState(\"\"); //add all the elemetns later\n\n        const [hours, setHours] = useState(\"\");\n        const [refName, setRefName] = useState(\"\");\n        const [refContact, setRefContact] = useState(\"\");\n        const [year, setYear] = useState(\"2018\");\n        const [category, setCategory] = useState(\"SCHORLASHIP\");\n        const [tempImage, setTempImage] = useState(\"\");\n        const [isHighlight, setIsHighlight] = useState(false);\n        const [isImage, setIsImage] = useState(false);\n        const [image_, setImage] = useState([]); //   const [isHighlight, setHighlight] = useState(false); //false\n        // const onDrop = useCallback((acceptedFiles) => {\n        //   // Loop through accepted files\n        //   acceptedFiles.map((file) => {\n        //     // Initialize FileReader browser API\n        //     const reader = new FileReader();\n        //     // onload callback gets called after the reader reads the file data\n        //     reader.onload = function (e) {\n        //       // add the image into the state. Since FileReader reading process is asynchronous, its better to get the latest snapshot state (i.e., prevState) and update it.\n        //       setImage((prevState) => [\n        //         ...prevState,\n        //         { id: cuid(), src: e.target.result },\n        //       ]);\n        //       setIsImage(true);\n        //       //  console.log(image_);\n        //       setTempImage(e.target.result)\n        //     };\n        //     // Read the file as Data URL (since we accept only images)\n        //     reader.readAsDataURL(file);\n        //     // setIsImage(true);\n        //     return file;\n        //   });\n        // }, []);\n\n        const handleSubmit = e => {\n          e.preventDefault();\n          const experience = {\n            year,\n            category,\n            discription,\n            hours,\n            refName,\n            refContact,\n            isHighlight,\n            id: cuid()\n          }; //add all the form fields here\n          // console.log(\"jhgfhgfdhgfdhgf\")\n          // console.log(image_)\n          // const image={\n          //   uid,\n          //   eid,\n          //   iLink:image_,\n          //   id:cuid()\n          // }\n\n          this.props.createExperiece(this.experience); // fetch(\"http://localhost:8000/experiences/\", {\n          //   method: \"POST\",\n          //   headers: { \"Content-Type\": \"application/json\" },\n          //   body: JSON.stringify(experience),\n          // }).then(() => {\n          //   console.log(\"uploaded to server succesfully\");\n          //   //what to do next....eg: history.push('/');\n          // });\n          // fetch(\"//http://localhost:8000/images/\", {\n          //   method: \"POST\",\n          //   headers: { \"Content-Type\": \"application/json\" },\n          //   body: JSON.stringify(image),\n          // }).then(() => {\n          //   console.log(\"uploaded to server succesfully\");\n          //   //what to do next....eg: history.push('/');\n          // });\n        }; // useEffect(()=>{\n        //   console.log(\"this happened because of image\");\n        //   console.log(image_);\n        // },[image_])\n\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"FormInput\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Transcript Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"\",\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"\",\n              children: \"Year:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"year1\",\n              children: \"2018\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"year2\",\n              children: \"2019\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"year3\",\n              children: \"2020\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"year4\",\n              children: \"2021\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              children: \"Add to transcript\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 5\n        }, this);\n      }, \"/cfI9OEn6WB9UrCPR631I+i4+qc=\");\n    };\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    createExperiece: experience => dispatch(createExperiece(experience))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(InputForm);","map":{"version":3,"sources":["/Users/leftee/Documents/GitHub/transcript_ashesi_/src/Components/SideForm/InputForm.js"],"names":["React","Component","useState","DragAndDrop","createExperiece","connect","cuid","Highlight","UploadedImage","InputForm","render","discription","setDiscriptiion","hours","setHours","refName","setRefName","refContact","setRefContact","year","setYear","category","setCategory","tempImage","setTempImage","isHighlight","setIsHighlight","isImage","setIsImage","image_","setImage","handleSubmit","e","preventDefault","experience","id","props","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React,{ Component,useState} from \"react\";\nimport DragAndDrop from \"../DragAndDrop\";\nimport { createExperiece } from \"../../Redux/actions/experienceActions\";\nimport { connect } from \"react-redux\";\n// cuid is a simple library to generate unique IDs\nimport cuid from \"cuid\";\nimport \"./InputForm.css\";\nimport { Highlight } from \"@material-ui/icons\";\nimport UploadedImage from \"../UploadedImage\";\n// import { Component } from \"react\";\n\n// function InputForm() {\n//     return (\n//         <div>\n//             this is the form section\n//         </div>\n//     )\n// }\n\nclass InputForm extends Component {\n  render=()=>()=>()=>{\n    // this.state={\n    //   hours:\"\",\n    //   refName:\"\",\n    //   discription:\"\",\n    //   refContact:\"\",\n    //   year:\"2018\",\n    //   category:\"SCHOLARSHIP\",\n    //   isHighlight:false,\n    //   //image_:\"\"\n    // };\nconst [discription, setDiscriptiion] = useState(\"\"); //add all the elemetns later\n  const [hours, setHours] = useState(\"\");\n  const [refName, setRefName] = useState(\"\");\n  const [refContact, setRefContact] = useState(\"\");\n  const [year, setYear] = useState(\"2018\");\n  const [category, setCategory] = useState(\"SCHORLASHIP\");\n  const [tempImage,setTempImage] = useState(\"\");\n\n  const [isHighlight, setIsHighlight] = useState(false);\n  const [isImage,setIsImage]=useState(false);\n  const [image_, setImage] = useState([]); //   const [isHighlight, setHighlight] = useState(false); //false\n\n  // const onDrop = useCallback((acceptedFiles) => {\n  //   // Loop through accepted files\n  //   acceptedFiles.map((file) => {\n  //     // Initialize FileReader browser API\n  //     const reader = new FileReader();\n  //     // onload callback gets called after the reader reads the file data\n  //     reader.onload = function (e) {\n  //       // add the image into the state. Since FileReader reading process is asynchronous, its better to get the latest snapshot state (i.e., prevState) and update it.\n  //       setImage((prevState) => [\n  //         ...prevState,\n  //         { id: cuid(), src: e.target.result },\n  //       ]);\n  //       setIsImage(true);\n  //       //  console.log(image_);\n  //       setTempImage(e.target.result)\n\n  //     };\n  //     // Read the file as Data URL (since we accept only images)\n  //     reader.readAsDataURL(file);\n  //     // setIsImage(true);\n  //     return file;\n  //   });\n  // }, []);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const experience = {\n \n      year,\n      category,\n      discription,\n      hours,\n      refName,\n      refContact,\n      isHighlight,\n      id:cuid()\n   \n      \n    }; //add all the form fields here\n    // console.log(\"jhgfhgfdhgfdhgf\")\n    // console.log(image_)\n    // const image={\n    //   uid,\n    //   eid,\n    //   iLink:image_,\n    //   id:cuid()\n\n    // }\n    this.props.createExperiece(this.experience)\n    \n\n    // fetch(\"http://localhost:8000/experiences/\", {\n    //   method: \"POST\",\n    //   headers: { \"Content-Type\": \"application/json\" },\n    //   body: JSON.stringify(experience),\n    // }).then(() => {\n    //   console.log(\"uploaded to server succesfully\");\n    //   //what to do next....eg: history.push('/');\n    // });\n\n    // fetch(\"//http://localhost:8000/images/\", {\n    //   method: \"POST\",\n    //   headers: { \"Content-Type\": \"application/json\" },\n    //   body: JSON.stringify(image),\n    // }).then(() => {\n    //   console.log(\"uploaded to server succesfully\");\n    //   //what to do next....eg: history.push('/');\n    // });\n\n  };\n\n    // useEffect(()=>{\n    //   console.log(\"this happened because of image\");\n    //   console.log(image_);\n    // },[image_])\n\n  return (\n    <div className=\"FormInput\">\n      <h3>Transcript Data</h3>\n      <form className=\"\" onSubmit={handleSubmit}>\n        <label className=\"\">Year:</label>\n        {/* <select value={year} onChange={(e) => setYear({year:e.state.value})}> */}\n          <option value=\"year1\">2018</option>\n          <option value=\"year2\">2019</option>\n          <option value=\"year3\">2020</option>\n          <option value=\"year4\">2021</option>\n        {/* </select> */}\n        {/* <label className=\"\">Category:</label>\n        <select value={this.state.category} onChange={(e) => this.setState({category:e.target.value})}>\n          <option value=\"cat1\">LEADERSHIP</option>\n          <option value=\"cat2\">CITIZENSHIP</option>\n          <option value=\"cat3\">SCHOLARSHIP</option>\n        </select>\n        <label className=\"\">Brief Discription:</label>\n        <input\n          type=\"text\"\n          required\n          maxLength={\"120\"}\n          value={this.state.discription}\n          onChange={(e) => this.setState({discription:e.target.value})}\n        />\n        <label className=\"\">Number of Hours:</label>\n        <input\n          type=\"number\"\n          required\n          value={this.state.hours}\n          onChange={(e) => this.setState({hours:e.target.value})}\n        />\n        <label className=\"\">Reference Name:</label>\n        <input\n          type=\"text\"\n          required\n          value={this.state.refName}\n          onChange={(e) => this.setState({refName:e.target.value})}\n        />\n        <label className=\"\">Reference Contact:</label>\n        <input\n          type=\"email\"\n          required\n          maxLength={\"40\"}\n          value={this.state.refContact}\n          onChange={(e) => this.setState({refContact:e.target.value})}\n        />\n        <label className=\"\">Add as a major Highlight:</label>\n        <label className=\"switch\">\n          <input\n            type=\"checkbox\"\n            value={this.state.isHighlight}\n            onChange={(e) => this.setState({isHighlight:(prevState) => !prevState})} //(e.target.value)}\n          />\n          <span className=\"slider round\"></span>\n        </label> */}\n\n        {/* {this.state.isHighlight && (\n          <div>\n            <DragAndDrop onChange={(e)=>setImage(e.target.value)} onDrop={onDrop} accept={\"image/*\"} />\n            {isImage && <UploadedImage image={temp}/>}\n          </div>\n           \n        )}\n         */}\n\n        {/* <label className=\"\">Add Data to Transcript</label> */}\n        <button>Add to transcript</button>\n      </form>\n    </div>\n  );\n};\n  }\n  \nconst mapDispatchToProps=(dispatch)=>{\n   return{\n     createExperiece :(experience)=>dispatch(createExperiece(experience))\n   }\n}\nexport default connect(null,mapDispatchToProps)(InputForm);\n"]},"metadata":{},"sourceType":"module"}