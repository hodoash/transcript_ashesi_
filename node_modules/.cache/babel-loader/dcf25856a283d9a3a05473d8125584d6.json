{"ast":null,"code":"var _jsxFileName = \"/Users/leftee/Documents/GitHub/transcript_ashesi_/src/Components/SideForm/InputForm.js\";\nimport React, { Component, useState, useCallback, useEffect } from \"react\";\nimport DragAndDrop from \"../DragAndDrop\";\nimport { createExperiece } from \"../../Redux/actions/experienceActions\";\nimport { connect } from \"react-redux\"; // cuid is a simple library to generate unique IDs\n\nimport cuid from \"cuid\";\nimport \"./InputForm.css\";\nimport { Highlight } from \"@material-ui/icons\";\nimport UploadedImage from \"../UploadedImage\"; // function InputForm() {\n//     return (\n//         <div>\n//             this is the form section\n//         </div>\n//     )\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass InputForm extends Compenent {\n  render() {\n    const [discription, setDiscriptiion] = useState(\"\"); //add all the elemetns later\n\n    const [hours, setHours] = useState(\"\");\n    const [refName, setRefName] = useState(\"\");\n    const [refContact, setRefContact] = useState(\"\");\n    const [year, setYear] = useState(\"2018\");\n    const [category, setCategory] = useState(\"SCHORLASHIP\");\n    const [tempImage, setTempImage] = useState(\"\");\n    const [isHighlight, setIsHighlight] = useState(false);\n    const [isImage, setIsImage] = useState(false);\n    const [image_, setImage] = useState([]); //   const [isHighlight, setHighlight] = useState(false); //false\n\n    const onDrop = useCallback(acceptedFiles => {\n      // Loop through accepted files\n      acceptedFiles.map(file => {\n        // Initialize FileReader browser API\n        const reader = new FileReader(); // onload callback gets called after the reader reads the file data\n\n        reader.onload = function (e) {\n          // add the image into the state. Since FileReader reading process is asynchronous, its better to get the latest snapshot state (i.e., prevState) and update it.\n          setImage(prevState => [...prevState, {\n            id: cuid(),\n            src: e.target.result\n          }]);\n          setIsImage(true); //  console.log(image_);\n\n          setTempImage(e.target.result);\n        }; // Read the file as Data URL (since we accept only images)\n\n\n        reader.readAsDataURL(file); // setIsImage(true);\n\n        return file;\n      });\n    }, []);\n\n    const handleSubmit = e => {\n      e.preventDefault();\n      const experience = {\n        year,\n        category,\n        discription,\n        hours,\n        refName,\n        refContact,\n        isHighlight,\n        id: cuid()\n      }; //add all the form fields here\n      // console.log(\"jhgfhgfdhgfdhgf\")\n      // console.log(image_)\n      // const image={\n      //   uid,\n      //   eid,\n      //   iLink:image_,\n      //   id:cuid()\n      // }\n\n      this.props.createExperiece(this.experience); // fetch(\"http://localhost:8000/experiences/\", {\n      //   method: \"POST\",\n      //   headers: { \"Content-Type\": \"application/json\" },\n      //   body: JSON.stringify(experience),\n      // }).then(() => {\n      //   console.log(\"uploaded to server succesfully\");\n      //   //what to do next....eg: history.push('/');\n      // });\n      // fetch(\"//http://localhost:8000/images/\", {\n      //   method: \"POST\",\n      //   headers: { \"Content-Type\": \"application/json\" },\n      //   body: JSON.stringify(image),\n      // }).then(() => {\n      //   console.log(\"uploaded to server succesfully\");\n      //   //what to do next....eg: history.push('/');\n      // });\n    }; // useEffect(()=>{\n    //   console.log(\"this happened because of image\");\n    //   console.log(image_);\n    // },[image_])\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"FormInput\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Transcript Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"\",\n          children: \"Year:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: year,\n          onChange: e => setYear(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"year1\",\n            children: \"2018\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"year2\",\n            children: \"2019\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"year3\",\n            children: \"2020\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"year4\",\n            children: \"2021\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"\",\n          children: \"Category:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: category,\n          onChange: e => setCategory(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"cat1\",\n            children: \"LEADERSHIP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"cat2\",\n            children: \"CITIZENSHIP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"cat3\",\n            children: \"SCHOLARSHIP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"\",\n          children: \"Brief Discription:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          required: true,\n          maxLength: \"120\",\n          value: discription,\n          onChange: e => setDiscriptiion(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"\",\n          children: \"Number of Hours:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          required: true,\n          value: hours,\n          onChange: e => setHours(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"\",\n          children: \"Reference Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          required: true,\n          value: refName,\n          onChange: e => setRefName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"\",\n          children: \"Reference Contact:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          required: true,\n          maxLength: \"40\",\n          value: refContact,\n          onChange: e => setRefContact(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"\",\n          children: \"Add as a major Highlight:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"switch\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            value: isHighlight,\n            onChange: e => setIsHighlight(prevState => !prevState) //(e.target.value)}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"slider round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this), isHighlight && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(DragAndDrop, {\n            onChange: e => setImage(e.target.value),\n            onDrop: onDrop,\n            accept: \"image/*\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Add to transcript\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    createExperiece: experience => dispatch(createExperiece(experience))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(InputForm);","map":{"version":3,"sources":["/Users/leftee/Documents/GitHub/transcript_ashesi_/src/Components/SideForm/InputForm.js"],"names":["React","Component","useState","useCallback","useEffect","DragAndDrop","createExperiece","connect","cuid","Highlight","UploadedImage","InputForm","Compenent","render","discription","setDiscriptiion","hours","setHours","refName","setRefName","refContact","setRefContact","year","setYear","category","setCategory","tempImage","setTempImage","isHighlight","setIsHighlight","isImage","setIsImage","image_","setImage","onDrop","acceptedFiles","map","file","reader","FileReader","onload","e","prevState","id","src","target","result","readAsDataURL","handleSubmit","preventDefault","experience","props","value","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component,useState, useCallback, useEffect } from \"react\";\nimport DragAndDrop from \"../DragAndDrop\";\nimport { createExperiece } from \"../../Redux/actions/experienceActions\";\nimport { connect } from \"react-redux\";\n// cuid is a simple library to generate unique IDs\nimport cuid from \"cuid\";\nimport \"./InputForm.css\";\nimport { Highlight } from \"@material-ui/icons\";\nimport UploadedImage from \"../UploadedImage\";\n\n// function InputForm() {\n//     return (\n//         <div>\n//             this is the form section\n//         </div>\n//     )\n// }\n\nclass InputForm extends Compenent {\n  render(){\n    const [discription, setDiscriptiion] = useState(\"\"); //add all the elemetns later\n    const [hours, setHours] = useState(\"\");\n    const [refName, setRefName] = useState(\"\");\n    const [refContact, setRefContact] = useState(\"\");\n    const [year, setYear] = useState(\"2018\");\n    const [category, setCategory] = useState(\"SCHORLASHIP\");\n    const [tempImage,setTempImage] = useState(\"\");\n  \n    const [isHighlight, setIsHighlight] = useState(false);\n    const [isImage,setIsImage]=useState(false);\n    const [image_, setImage] = useState([]); //   const [isHighlight, setHighlight] = useState(false); //false\n  \n    const onDrop = useCallback((acceptedFiles) => {\n      // Loop through accepted files\n      acceptedFiles.map((file) => {\n        // Initialize FileReader browser API\n        const reader = new FileReader();\n        // onload callback gets called after the reader reads the file data\n        reader.onload = function (e) {\n          // add the image into the state. Since FileReader reading process is asynchronous, its better to get the latest snapshot state (i.e., prevState) and update it.\n          setImage((prevState) => [\n            ...prevState,\n            { id: cuid(), src: e.target.result },\n          ]);\n          setIsImage(true);\n          //  console.log(image_);\n          setTempImage(e.target.result)\n  \n        };\n        // Read the file as Data URL (since we accept only images)\n        reader.readAsDataURL(file);\n        // setIsImage(true);\n        return file;\n      });\n    }, []);\n  \n    const handleSubmit = (e) => {\n      e.preventDefault();\n      const experience = {\n   \n        year,\n        category,\n        discription,\n        hours,\n        refName,\n        refContact,\n        isHighlight,\n        id:cuid()\n     \n        \n      }; //add all the form fields here\n      // console.log(\"jhgfhgfdhgfdhgf\")\n      // console.log(image_)\n      // const image={\n      //   uid,\n      //   eid,\n      //   iLink:image_,\n      //   id:cuid()\n  \n      // }\n      this.props.createExperiece(this.experience)\n      \n  \n      // fetch(\"http://localhost:8000/experiences/\", {\n      //   method: \"POST\",\n      //   headers: { \"Content-Type\": \"application/json\" },\n      //   body: JSON.stringify(experience),\n      // }).then(() => {\n      //   console.log(\"uploaded to server succesfully\");\n      //   //what to do next....eg: history.push('/');\n      // });\n  \n      // fetch(\"//http://localhost:8000/images/\", {\n      //   method: \"POST\",\n      //   headers: { \"Content-Type\": \"application/json\" },\n      //   body: JSON.stringify(image),\n      // }).then(() => {\n      //   console.log(\"uploaded to server succesfully\");\n      //   //what to do next....eg: history.push('/');\n      // });\n  \n    };\n  \n      // useEffect(()=>{\n      //   console.log(\"this happened because of image\");\n      //   console.log(image_);\n      // },[image_])\n\n      return (\n        <div className=\"FormInput\">\n          <h3>Transcript Data</h3>\n          <form className=\"\" onSubmit={handleSubmit}>\n            <label className=\"\">Year:</label>\n            <select value={year} onChange={(e) => setYear(e.target.value)}>\n              <option value=\"year1\">2018</option>\n              <option value=\"year2\">2019</option>\n              <option value=\"year3\">2020</option>\n              <option value=\"year4\">2021</option>\n            </select>\n            <label className=\"\">Category:</label>\n            <select value={category} onChange={(e) => setCategory(e.target.value)}>\n              <option value=\"cat1\">LEADERSHIP</option>\n              <option value=\"cat2\">CITIZENSHIP</option>\n              <option value=\"cat3\">SCHOLARSHIP</option>\n            </select>\n            <label className=\"\">Brief Discription:</label>\n            <input\n              type=\"text\"\n              required\n              maxLength={\"120\"}\n              value={discription}\n              onChange={(e) => setDiscriptiion(e.target.value)}\n            />\n            <label className=\"\">Number of Hours:</label>\n            <input\n              type=\"number\"\n              required\n              value={hours}\n              onChange={(e) => setHours(e.target.value)}\n            />\n            <label className=\"\">Reference Name:</label>\n            <input\n              type=\"text\"\n              required\n              value={refName}\n              onChange={(e) => setRefName(e.target.value)}\n            />\n            <label className=\"\">Reference Contact:</label>\n            <input\n              type=\"email\"\n              required\n              maxLength={\"40\"}\n              value={refContact}\n              onChange={(e) => setRefContact(e.target.value)}\n            />\n            <label className=\"\">Add as a major Highlight:</label>\n            <label className=\"switch\">\n              <input\n                type=\"checkbox\"\n                value={isHighlight}\n                onChange={(e) => setIsHighlight((prevState) => !prevState)} //(e.target.value)}\n              />\n              <span className=\"slider round\"></span>\n            </label>\n    \n            {isHighlight && (\n              <div>\n                <DragAndDrop onChange={(e)=>setImage(e.target.value)} onDrop={onDrop} accept={\"image/*\"} />\n                {/* {isImage && <UploadedImage image={temp}/>} */}\n              </div>\n               \n            )}\n            \n    \n            {/* <label className=\"\">Add Data to Transcript</label> */}\n            <button>Add to transcript</button>\n          </form>\n        </div>\n      );\n    };\n    \n  }\n \n\n  const mapDispatchToProps=(dispatch)=>{\n    return{\n      createExperiece :(experience)=>dispatch(createExperiece(experience))\n    }\n }\nexport default connect(null,mapDispatchToProps)(InputForm);\n"]},"metadata":{},"sourceType":"module"}