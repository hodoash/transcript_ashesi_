{"ast":null,"code":"var _jsxFileName = \"/Users/leftee/Documents/GitHub/transcript_ashesi_/src/Components/SideForm/InputForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport DragAndDrop from \"../DragAndDrop\"; // cuid is a simple library to generate unique IDs\n\nimport cuid from \"cuid\";\nimport \"./InputForm.css\"; // function InputForm() {\n//     return (\n//         <div>\n//             this is the form section\n//         </div>\n//     )\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InputForm = () => {\n  _s();\n\n  const [name, setName] = useState(\"\"); //add all the elemetns later\n\n  const [dot, setDot] = useState(\"mario\");\n  const [slider, setSlider] = useState(false); //   const [isHighlight, setHighlight] = useState(false); //false\n\n  const [image, setImage] = useState([]);\n  const onDrop = useCallback(acceptedFiles => {\n    // Loop through accepted files\n    acceptedFiles.map(file => {\n      // Initialize FileReader browser API\n      const reader = new FileReader(); // onload callback gets called after the reader reads the file data\n\n      reader.onload = function (e) {\n        // add the image into the state. Since FileReader reading process is asynchronous, its better to get the latest snapshot state (i.e., prevState) and update it. \n        setImage(prevState => [...prevState, {\n          id: cuid(),\n          src: e.target.result\n        }]);\n      }; // Read the file as Data URL (since we accept only images)\n\n\n      reader.readAsDataURL(file);\n      return file;\n    });\n  }, []);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const experience = {\n      name,\n      dot\n    }; //add all the form fields here\n\n    fetch(\"//the url of the post goes here\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(experience)\n    }).then(() => {\n      console.log(\"uploaded to server succesfully\"); //what to do next....eg: history.push('/');\n    });\n  };\n\n  useEffect(() => {}, slider);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"FormInput\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Transcript Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"\",\n        children: \"Year:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: dot,\n        onChange: e => setDot(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"mario\",\n          children: \"mario\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"second value\",\n          children: \"second value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"\",\n        children: \"Category:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: dot,\n        onChange: e => setDot(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"mario\",\n          children: \"mario\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"second value\",\n          children: \"second value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"\",\n        children: \"Brief Discription:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        required: true,\n        maxLength: \"120\",\n        value: name,\n        onChange: e => setName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"\",\n        children: \"Number of Hours:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        required: true,\n        value: name,\n        onChange: e => setName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"\",\n        children: \"Reference Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        required: true,\n        value: name,\n        onChange: e => setName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"\",\n        children: \"Reference Contact:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        required: true,\n        maxLength: \"40\",\n        value: name,\n        onChange: e => setName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"\",\n        children: \"Add as a major Highlight:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"switch\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          value: slider,\n          onChange: e => setSlider(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"slider round\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), slider && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(DragAndDrop, {\n          onDrop: onDrop,\n          accept: \"image/*\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add to transcript\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(InputForm, \"YBYAg4RUOSB6uJokcYm5SVViKQU=\");\n\n_c = InputForm;\nexport default InputForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputForm\");","map":{"version":3,"sources":["/Users/leftee/Documents/GitHub/transcript_ashesi_/src/Components/SideForm/InputForm.js"],"names":["React","useState","useCallback","useEffect","DragAndDrop","cuid","InputForm","name","setName","dot","setDot","slider","setSlider","image","setImage","onDrop","acceptedFiles","map","file","reader","FileReader","onload","e","prevState","id","src","target","result","readAsDataURL","handleSubmit","preventDefault","experience","fetch","method","headers","body","JSON","stringify","then","console","log","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,OAAOC,WAAP,MAAwB,gBAAxB,C,CACA;;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAO,iBAAP,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAGtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC,CAHsB,CAGgB;;AACtC,QAAM,CAACQ,GAAD,EAAMC,MAAN,IAAgBT,QAAQ,CAAC,OAAD,CAA9B;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,KAAD,CAApC,CALsB,CAOxB;;AACE,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAMc,MAAM,GAAGb,WAAW,CAACc,aAAa,IAAI;AAC1C;AACAA,IAAAA,aAAa,CAACC,GAAd,CAAkBC,IAAI,IAAI;AACxB;AACA,YAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf,CAFwB,CAGxB;;AACAD,MAAAA,MAAM,CAACE,MAAP,GAAgB,UAASC,CAAT,EAAY;AAC1B;AACAR,QAAAA,QAAQ,CAACS,SAAS,IAAI,CACpB,GAAGA,SADiB,EAEpB;AAAEC,UAAAA,EAAE,EAAEnB,IAAI,EAAV;AAAcoB,UAAAA,GAAG,EAAEH,CAAC,CAACI,MAAF,CAASC;AAA5B,SAFoB,CAAd,CAAR;AAID,OAND,CAJwB,CAWxB;;;AACAR,MAAAA,MAAM,CAACS,aAAP,CAAqBV,IAArB;AACA,aAAOA,IAAP;AACD,KAdD;AAeD,GAjByB,EAiBvB,EAjBuB,CAA1B;;AAmBA,QAAMW,YAAY,GAAIP,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACQ,cAAF;AACA,UAAMC,UAAU,GAAG;AAAExB,MAAAA,IAAF;AAAQE,MAAAA;AAAR,KAAnB,CAF0B,CAEQ;;AAElCuB,IAAAA,KAAK,CAAC,iCAAD,EAAoC;AACvCC,MAAAA,MAAM,EAAE,MAD+B;AAEvCC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAF8B;AAGvCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,UAAf;AAHiC,KAApC,CAAL,CAIGO,IAJH,CAIQ,MAAM;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EADY,CAEZ;AACD,KAPD;AAQD,GAZD;;AAcArC,EAAAA,SAAS,CAAC,MAAI,CAEb,CAFQ,EAEPQ,MAFO,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAM,MAAA,SAAS,EAAC,EAAhB;AAAmB,MAAA,QAAQ,EAAEkB,YAA7B;AAAA,8BACE;AAAO,QAAA,SAAS,EAAC,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,KAAK,EAAEpB,GAAf;AAAoB,QAAA,QAAQ,EAAGa,CAAD,IAAOZ,MAAM,CAACY,CAAC,CAACI,MAAF,CAASe,KAAV,CAA3C;AAAA,gCACE;AAAQ,UAAA,KAAK,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAQ,UAAA,KAAK,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAME;AAAO,QAAA,SAAS,EAAC,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,eAOE;AAAQ,QAAA,KAAK,EAAEhC,GAAf;AAAoB,QAAA,QAAQ,EAAGa,CAAD,IAAOZ,MAAM,CAACY,CAAC,CAACI,MAAF,CAASe,KAAV,CAA3C;AAAA,gCACE;AAAQ,UAAA,KAAK,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAQ,UAAA,KAAK,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,eAWE;AAAO,QAAA,SAAS,EAAC,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF,eAYE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,QAAQ,MAFV;AAGE,QAAA,SAAS,EAAE,KAHb;AAIE,QAAA,KAAK,EAAElC,IAJT;AAKE,QAAA,QAAQ,EAAGe,CAAD,IAAOd,OAAO,CAACc,CAAC,CAACI,MAAF,CAASe,KAAV;AAL1B;AAAA;AAAA;AAAA;AAAA,cAZF,eAmBE;AAAO,QAAA,SAAS,EAAC,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBF,eAoBE;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,QAAQ,MAFV;AAGE,QAAA,KAAK,EAAElC,IAHT;AAIE,QAAA,QAAQ,EAAGe,CAAD,IAAOd,OAAO,CAACc,CAAC,CAACI,MAAF,CAASe,KAAV;AAJ1B;AAAA;AAAA;AAAA;AAAA,cApBF,eA0BE;AAAO,QAAA,SAAS,EAAC,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA1BF,eA2BE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,QAAQ,MAFV;AAGE,QAAA,KAAK,EAAElC,IAHT;AAIE,QAAA,QAAQ,EAAGe,CAAD,IAAOd,OAAO,CAACc,CAAC,CAACI,MAAF,CAASe,KAAV;AAJ1B;AAAA;AAAA;AAAA;AAAA,cA3BF,eAiCE;AAAO,QAAA,SAAS,EAAC,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjCF,eAkCE;AACE,QAAA,IAAI,EAAC,OADP;AAEE,QAAA,QAAQ,MAFV;AAGE,QAAA,SAAS,EAAE,IAHb;AAIE,QAAA,KAAK,EAAElC,IAJT;AAKE,QAAA,QAAQ,EAAGe,CAAD,IAAOd,OAAO,CAACc,CAAC,CAACI,MAAF,CAASe,KAAV;AAL1B;AAAA;AAAA;AAAA;AAAA,cAlCF,eAyCE;AAAO,QAAA,SAAS,EAAC,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAzCF,eA0CE;AAAO,QAAA,SAAS,EAAC,QAAjB;AAAA,gCACE;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,KAAK,EAAE9B,MAFT;AAGE,UAAA,QAAQ,EAAGW,CAAD,IAAOV,SAAS,CAACU,CAAC,CAACI,MAAF,CAASe,KAAV;AAH5B;AAAA;AAAA;AAAA;AAAA,gBADF,eAME;AAAM,UAAA,SAAS,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cA1CF,EAmDG9B,MAAM,iBACL;AAAA,+BACE,QAAC,WAAD;AAAa,UAAA,MAAM,EAAEI,MAArB;AAA6B,UAAA,MAAM,EAAE;AAArC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cApDJ,eA0DE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA1DF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiED,CAhHD;;GAAMT,S;;KAAAA,S;AAiHN,eAAeA,SAAf","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\nimport DragAndDrop from \"../DragAndDrop\";\n// cuid is a simple library to generate unique IDs\nimport cuid from \"cuid\";\nimport \"./InputForm.css\";\n\n\n// function InputForm() {\n//     return (\n//         <div>\n//             this is the form section\n//         </div>\n//     )\n// }\n\nconst InputForm = () => {\n  \n\n  const [name, setName] = useState(\"\"); //add all the elemetns later\n  const [dot, setDot] = useState(\"mario\");\n  const [slider, setSlider] = useState(false);\n\n//   const [isHighlight, setHighlight] = useState(false); //false\n  const [image, setImage] = useState([]);\n\n  const onDrop = useCallback(acceptedFiles => {\n    // Loop through accepted files\n    acceptedFiles.map(file => {\n      // Initialize FileReader browser API\n      const reader = new FileReader();\n      // onload callback gets called after the reader reads the file data\n      reader.onload = function(e) {\n        // add the image into the state. Since FileReader reading process is asynchronous, its better to get the latest snapshot state (i.e., prevState) and update it. \n        setImage(prevState => [\n          ...prevState,\n          { id: cuid(), src: e.target.result }\n        ]);\n      };\n      // Read the file as Data URL (since we accept only images)\n      reader.readAsDataURL(file);\n      return file;\n    });\n  }, []);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const experience = { name, dot }; //add all the form fields here\n\n    fetch(\"//the url of the post goes here\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(experience),\n    }).then(() => {\n      console.log(\"uploaded to server succesfully\");\n      //what to do next....eg: history.push('/');\n    });\n  };\n\n  useEffect(()=>{\n\n  },slider)\n\n  return (\n    <div className=\"FormInput\">\n      <h3>Transcript Data</h3>\n      <form className=\"\" onSubmit={handleSubmit}>\n        <label className=\"\">Year:</label>\n        <select value={dot} onChange={(e) => setDot(e.target.value)}>\n          <option value=\"mario\">mario</option>\n          <option value=\"second value\">second value</option>\n        </select>\n        <label className=\"\">Category:</label>\n        <select value={dot} onChange={(e) => setDot(e.target.value)}>\n          <option value=\"mario\">mario</option>\n          <option value=\"second value\">second value</option>\n        </select>\n        <label className=\"\">Brief Discription:</label>\n        <input\n          type=\"text\"\n          required\n          maxLength={\"120\"}\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n        />\n        <label className=\"\">Number of Hours:</label>\n        <input\n          type=\"number\"\n          required\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n        />\n        <label className=\"\">Reference Name:</label>\n        <input\n          type=\"text\"\n          required\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n        />\n        <label className=\"\">Reference Contact:</label>\n        <input\n          type=\"email\"\n          required\n          maxLength={\"40\"}\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n        />\n        <label className=\"\">Add as a major Highlight:</label>\n        <label className=\"switch\">\n          <input\n            type=\"checkbox\"\n            value={slider}\n            onChange={(e) => setSlider(e.target.value)}\n          />\n          <span className=\"slider round\"></span>\n        </label>\n\n        {slider && (\n          <div>\n            <DragAndDrop onDrop={onDrop} accept={\"image/*\"} />\n          </div>\n        )}\n\n        {/* <label className=\"\">Add Data to Transcript</label> */}\n        <button>Add to transcript</button>\n      </form>\n    </div>\n  );\n};\nexport default InputForm;\n"]},"metadata":{},"sourceType":"module"}