{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\"; // import {db} from \"../../data/db.json\"\n\nconst initialState = {\n  userInfo: [{\n    name: \"albert hodo\",\n    degree: \" M.Sc\",\n    major: \"Computer Science\",\n    expectedDate: \"2021\",\n    id: 1\n  }]\n};\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    // increment: (state) => {\n    //   // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n    //   // doesn't actually mutate the state because it uses the Immer library,\n    //   // which detects changes to a \"draft state\" and produces a brand new\n    //   // immutable state based off those changes\n    //   state.value += 1\n    // },\n    // decrement: (state) => {\n    //   state.value -= 1\n    // },\n    updatePersonalInfo: (state, action) => {\n      //state.value += action.payload\n      state.user = action.payload;\n    }\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  updatePersonalInfo\n} = userSlice.actions;\nexport const getUserData = state => state.user.user;\nexport default userSlice.reducer;","map":{"version":3,"sources":["/Users/leftee/Documents/GitHub/transcript_ashesi_/src/Redux/userSlice.js"],"names":["createSlice","initialState","userInfo","name","degree","major","expectedDate","id","userSlice","reducers","updatePersonalInfo","state","action","user","payload","actions","getUserData","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B,C,CAEA;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,CACR;AACEC,IAAAA,IAAI,EAAE,aADR;AAEEC,IAAAA,MAAM,EAAE,OAFV;AAGEC,IAAAA,KAAK,EAAE,kBAHT;AAIEC,IAAAA,YAAY,EAAE,MAJhB;AAKEC,IAAAA,EAAE,EAAE;AALN,GADQ;AADS,CAArB;AAYA,OAAO,MAAMC,SAAS,GAAGR,WAAW,CAAC;AACnCG,EAAAA,IAAI,EAAE,MAD6B;AAEnCF,EAAAA,YAFmC;AAGnCQ,EAAAA,QAAQ,EAAE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,kBAAkB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC;AACAD,MAAAA,KAAK,CAACE,IAAN,GAAaD,MAAM,CAACE,OAApB;AACD;AAdO;AAHyB,CAAD,CAA7B,C,CAqBP;;AACA,OAAO,MAAM;AAAEJ,EAAAA;AAAF,IAAyBF,SAAS,CAACO,OAAzC;AACP,OAAO,MAAMC,WAAW,GAAIL,KAAD,IAAWA,KAAK,CAACE,IAAN,CAAWA,IAA1C;AACP,eAAeL,SAAS,CAACS,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n// import {db} from \"../../data/db.json\"\n\nconst initialState = {\n  userInfo: [\n    {\n      name: \"albert hodo\",\n      degree: \" M.Sc\",\n      major: \"Computer Science\",\n      expectedDate: \"2021\",\n      id: 1,\n    }\n  ],\n};\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    // increment: (state) => {\n    //   // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n    //   // doesn't actually mutate the state because it uses the Immer library,\n    //   // which detects changes to a \"draft state\" and produces a brand new\n    //   // immutable state based off those changes\n    //   state.value += 1\n    // },\n    // decrement: (state) => {\n    //   state.value -= 1\n    // },\n    updatePersonalInfo: (state, action) => {\n      //state.value += action.payload\n      state.user = action.payload;\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { updatePersonalInfo } = userSlice.actions;\nexport const getUserData = (state) => state.user.user;\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}