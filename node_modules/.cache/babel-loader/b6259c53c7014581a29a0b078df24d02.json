{"ast":null,"code":"var _jsxFileName = \"/Users/leftee/Documents/GitHub/transcript_ashesi_/src/Components/SideForm/InputForm.js\";\nimport React, { Component } from \"react\";\nimport DragAndDrop from \"../DragAndDrop\";\nimport { createExperiece } from \"../../Redux/actions/experienceActions\";\nimport { connect } from \"react-redux\"; // cuid is a simple library to generate unique IDs\n\nimport cuid from \"cuid\";\nimport \"./InputForm.css\";\nimport { Highlight } from \"@material-ui/icons\";\nimport UploadedImage from \"../UploadedImage\"; // import { Component } from \"react\";\n// function InputForm() {\n//     return (\n//         <div>\n//             this is the form section\n//         </div>\n//     )\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass InputForm extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.render = () => () => () => {\n      this.state = {\n        hours: \"\",\n        refName: \"\",\n        discription: \"\",\n        refContact: \"\",\n        year: \"2018\",\n        category: \"SCHOLARSHIP\",\n        isHighlight: false //image_:\"\"\n\n      }; // const [discription, setDiscriptiion] = useState(\"\"); //add all the elemetns later\n      // const [hours, setHours] = useState(\"\");\n      // const [refName, setRefName] = useState(\"\");\n      // const [refContact, setRefContact] = useState(\"\");\n      // const [year, setYear] = useState(\"2018\");\n      // const [category, setCategory] = useState(\"SCHORLASHIP\");\n      // const [tempImage,setTempImage] = useState(\"\");\n      // const [isHighlight, setIsHighlight] = useState(false);\n      // const [isImage,setIsImage]=useState(false);\n      // const [image_, setImage] = useState([]); //   const [isHighlight, setHighlight] = useState(false); //false\n      // const onDrop = useCallback((acceptedFiles) => {\n      //   // Loop through accepted files\n      //   acceptedFiles.map((file) => {\n      //     // Initialize FileReader browser API\n      //     const reader = new FileReader();\n      //     // onload callback gets called after the reader reads the file data\n      //     reader.onload = function (e) {\n      //       // add the image into the state. Since FileReader reading process is asynchronous, its better to get the latest snapshot state (i.e., prevState) and update it.\n      //       setImage((prevState) => [\n      //         ...prevState,\n      //         { id: cuid(), src: e.target.result },\n      //       ]);\n      //       setIsImage(true);\n      //       //  console.log(image_);\n      //       setTempImage(e.target.result)\n      //     };\n      //     // Read the file as Data URL (since we accept only images)\n      //     reader.readAsDataURL(file);\n      //     // setIsImage(true);\n      //     return file;\n      //   });\n      // }, []);\n\n      const handleSubmit = e => {\n        e.preventDefault(); // const experience = {\n        //   year,\n        //   category,\n        //   discription,\n        //   hours,\n        //   refName,\n        //   refContact,\n        //   isHighlight,\n        //   id:cuid()\n        // }; //add all the form fields here\n        // console.log(\"jhgfhgfdhgfdhgf\")\n        // console.log(image_)\n        // const image={\n        //   uid,\n        //   eid,\n        //   iLink:image_,\n        //   id:cuid()\n        // }\n\n        this.props.createExperiece(this.state); // fetch(\"http://localhost:8000/experiences/\", {\n        //   method: \"POST\",\n        //   headers: { \"Content-Type\": \"application/json\" },\n        //   body: JSON.stringify(experience),\n        // }).then(() => {\n        //   console.log(\"uploaded to server succesfully\");\n        //   //what to do next....eg: history.push('/');\n        // });\n        // fetch(\"//http://localhost:8000/images/\", {\n        //   method: \"POST\",\n        //   headers: { \"Content-Type\": \"application/json\" },\n        //   body: JSON.stringify(image),\n        // }).then(() => {\n        //   console.log(\"uploaded to server succesfully\");\n        //   //what to do next....eg: history.push('/');\n        // });\n      }; // useEffect(()=>{\n      //   console.log(\"this happened because of image\");\n      //   console.log(image_);\n      // },[image_])\n\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"FormInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Transcript Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"\",\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"\",\n            children: \"Year:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: this.state.year,\n            onChange: e => this.setState({\n              year: e.state.value\n            }),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"year1\",\n              children: \"2018\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"year2\",\n              children: \"2019\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"year3\",\n              children: \"2020\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"year4\",\n              children: \"2021\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"\",\n            children: \"Category:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: this.state.category,\n            onChange: e => this.setState({\n              category: e.target.value\n            }),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"cat1\",\n              children: \"LEADERSHIP\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"cat2\",\n              children: \"CITIZENSHIP\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"cat3\",\n              children: \"SCHOLARSHIP\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"\",\n            children: \"Brief Discription:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            required: true,\n            maxLength: \"120\",\n            value: this.state.discription,\n            onChange: e => this.setState({\n              discription: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"\",\n            children: \"Number of Hours:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            required: true,\n            value: this.state.hours,\n            onChange: e => this.setState({\n              hours: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"\",\n            children: \"Reference Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            required: true,\n            value: this.state.refName,\n            onChange: e => this.setState({\n              refName: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"\",\n            children: \"Reference Contact:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            required: true,\n            maxLength: \"40\",\n            value: this.state.refContact,\n            onChange: e => this.setState({\n              refContact: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"\",\n            children: \"Add as a major Highlight:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"switch\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              value: this.state.isHighlight,\n              onChange: e => this.setState({\n                isHighlight: prevState => !prevState\n              }) //(e.target.value)}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"slider round\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Add to transcript\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 5\n      }, this);\n    };\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    createExperiece: experience => dispatch(createExperiece(experience))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(InputForm);","map":{"version":3,"sources":["/Users/leftee/Documents/GitHub/transcript_ashesi_/src/Components/SideForm/InputForm.js"],"names":["React","Component","DragAndDrop","createExperiece","connect","cuid","Highlight","UploadedImage","InputForm","render","state","hours","refName","discription","refContact","year","category","isHighlight","handleSubmit","e","preventDefault","props","setState","value","target","prevState","mapDispatchToProps","dispatch","experience"],"mappings":"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","sourcesContent":["import React,{ Component} from \"react\";\nimport DragAndDrop from \"../DragAndDrop\";\nimport { createExperiece } from \"../../Redux/actions/experienceActions\";\nimport { connect } from \"react-redux\";\n// cuid is a simple library to generate unique IDs\nimport cuid from \"cuid\";\nimport \"./InputForm.css\";\nimport { Highlight } from \"@material-ui/icons\";\nimport UploadedImage from \"../UploadedImage\";\n// import { Component } from \"react\";\n\n// function InputForm() {\n//     return (\n//         <div>\n//             this is the form section\n//         </div>\n//     )\n// }\n\nclass InputForm extends Component {\n  render=()=>()=>()=>{\n    this.state={\n      hours:\"\",\n      refName:\"\",\n      discription:\"\",\n      refContact:\"\",\n      year:\"2018\",\n      category:\"SCHOLARSHIP\",\n      isHighlight:false,\n      //image_:\"\"\n    };\n// const [discription, setDiscriptiion] = useState(\"\"); //add all the elemetns later\n  // const [hours, setHours] = useState(\"\");\n  // const [refName, setRefName] = useState(\"\");\n  // const [refContact, setRefContact] = useState(\"\");\n  // const [year, setYear] = useState(\"2018\");\n  // const [category, setCategory] = useState(\"SCHORLASHIP\");\n  // const [tempImage,setTempImage] = useState(\"\");\n\n  // const [isHighlight, setIsHighlight] = useState(false);\n  // const [isImage,setIsImage]=useState(false);\n  // const [image_, setImage] = useState([]); //   const [isHighlight, setHighlight] = useState(false); //false\n\n  // const onDrop = useCallback((acceptedFiles) => {\n  //   // Loop through accepted files\n  //   acceptedFiles.map((file) => {\n  //     // Initialize FileReader browser API\n  //     const reader = new FileReader();\n  //     // onload callback gets called after the reader reads the file data\n  //     reader.onload = function (e) {\n  //       // add the image into the state. Since FileReader reading process is asynchronous, its better to get the latest snapshot state (i.e., prevState) and update it.\n  //       setImage((prevState) => [\n  //         ...prevState,\n  //         { id: cuid(), src: e.target.result },\n  //       ]);\n  //       setIsImage(true);\n  //       //  console.log(image_);\n  //       setTempImage(e.target.result)\n\n  //     };\n  //     // Read the file as Data URL (since we accept only images)\n  //     reader.readAsDataURL(file);\n  //     // setIsImage(true);\n  //     return file;\n  //   });\n  // }, []);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // const experience = {\n \n    //   year,\n    //   category,\n    //   discription,\n    //   hours,\n    //   refName,\n    //   refContact,\n    //   isHighlight,\n    //   id:cuid()\n   \n      \n    // }; //add all the form fields here\n    // console.log(\"jhgfhgfdhgfdhgf\")\n    // console.log(image_)\n    // const image={\n    //   uid,\n    //   eid,\n    //   iLink:image_,\n    //   id:cuid()\n\n    // }\n    this.props.createExperiece(this.state)\n    \n\n    // fetch(\"http://localhost:8000/experiences/\", {\n    //   method: \"POST\",\n    //   headers: { \"Content-Type\": \"application/json\" },\n    //   body: JSON.stringify(experience),\n    // }).then(() => {\n    //   console.log(\"uploaded to server succesfully\");\n    //   //what to do next....eg: history.push('/');\n    // });\n\n    // fetch(\"//http://localhost:8000/images/\", {\n    //   method: \"POST\",\n    //   headers: { \"Content-Type\": \"application/json\" },\n    //   body: JSON.stringify(image),\n    // }).then(() => {\n    //   console.log(\"uploaded to server succesfully\");\n    //   //what to do next....eg: history.push('/');\n    // });\n\n  };\n\n    // useEffect(()=>{\n    //   console.log(\"this happened because of image\");\n    //   console.log(image_);\n    // },[image_])\n\n  return (\n    <div className=\"FormInput\">\n      <h3>Transcript Data</h3>\n      <form className=\"\" onSubmit={handleSubmit}>\n        <label className=\"\">Year:</label>\n        <select value={this.state.year} onChange={(e) => this.setState({year:e.state.value})}>\n          <option value=\"year1\">2018</option>\n          <option value=\"year2\">2019</option>\n          <option value=\"year3\">2020</option>\n          <option value=\"year4\">2021</option>\n        </select>\n        <label className=\"\">Category:</label>\n        <select value={this.state.category} onChange={(e) => this.setState({category:e.target.value})}>\n          <option value=\"cat1\">LEADERSHIP</option>\n          <option value=\"cat2\">CITIZENSHIP</option>\n          <option value=\"cat3\">SCHOLARSHIP</option>\n        </select>\n        <label className=\"\">Brief Discription:</label>\n        <input\n          type=\"text\"\n          required\n          maxLength={\"120\"}\n          value={this.state.discription}\n          onChange={(e) => this.setState({discription:e.target.value})}\n        />\n        <label className=\"\">Number of Hours:</label>\n        <input\n          type=\"number\"\n          required\n          value={this.state.hours}\n          onChange={(e) => this.setState({hours:e.target.value})}\n        />\n        <label className=\"\">Reference Name:</label>\n        <input\n          type=\"text\"\n          required\n          value={this.state.refName}\n          onChange={(e) => this.setState({refName:e.target.value})}\n        />\n        <label className=\"\">Reference Contact:</label>\n        <input\n          type=\"email\"\n          required\n          maxLength={\"40\"}\n          value={this.state.refContact}\n          onChange={(e) => this.setState({refContact:e.target.value})}\n        />\n        <label className=\"\">Add as a major Highlight:</label>\n        <label className=\"switch\">\n          <input\n            type=\"checkbox\"\n            value={this.state.isHighlight}\n            onChange={(e) => this.setState({isHighlight:(prevState) => !prevState})} //(e.target.value)}\n          />\n          <span className=\"slider round\"></span>\n        </label>\n\n        {/* {this.state.isHighlight && (\n          <div>\n            <DragAndDrop onChange={(e)=>setImage(e.target.value)} onDrop={onDrop} accept={\"image/*\"} />\n            {isImage && <UploadedImage image={temp}/>}\n          </div>\n           \n        )}\n         */}\n\n        {/* <label className=\"\">Add Data to Transcript</label> */}\n        <button>Add to transcript</button>\n      </form>\n    </div>\n  );\n};\n  }\n  \nconst mapDispatchToProps=(dispatch)=>{\n   return{\n     createExperiece :(experience)=>dispatch(createExperiece(experience))\n   }\n}\nexport default connect(null,mapDispatchToProps)(InputForm);\n"]},"metadata":{},"sourceType":"module"}