{"ast":null,"code":"var _jsxFileName = \"/Users/leftee/Documents/GitHub/transcript_ashesi_/src/Components/SideForm/InputForm.js\";\nimport React, { Component, useState } from \"react\";\nimport DragAndDrop from \"../DragAndDrop\";\nimport { createExperiece } from \"../../Redux/actions/experienceActions\";\nimport { connect } from \"react-redux\"; // cuid is a simple library to generate unique IDs\n\nimport cuid from \"cuid\";\nimport \"./InputForm.css\";\nimport { Highlight } from \"@material-ui/icons\";\nimport UploadedImage from \"../UploadedImage\"; // import { Component } from \"react\";\n// function InputForm() {\n//     return (\n//         <div>\n//             this is the form section\n//         </div>\n//     )\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass InputForm extends Component {\n  constructor() {\n    var _s = $RefreshSig$();\n\n    super(...arguments);\n    this.render = _s(() => {\n      _s();\n\n      // this.state={\n      //   hours:\"\",\n      //   refName:\"\",\n      //   discription:\"\",\n      //   refContact:\"\",\n      //   year:\"2018\",\n      //   category:\"SCHOLARSHIP\",\n      //   isHighlight:false,\n      //   //image_:\"\"\n      // };\n      const [discription, setDiscriptiion] = useState(\"\"); //add all the elemetns later\n\n      const [hours, setHours] = useState(\"\");\n      const [refName, setRefName] = useState(\"\");\n      const [refContact, setRefContact] = useState(\"\");\n      const [year, setYear] = useState(\"2018\");\n      const [category, setCategory] = useState(\"SCHORLASHIP\");\n      const [tempImage, setTempImage] = useState(\"\");\n      const [isHighlight, setIsHighlight] = useState(false);\n      const [isImage, setIsImage] = useState(false);\n      const [image_, setImage] = useState([]); //   const [isHighlight, setHighlight] = useState(false); //false\n      // const onDrop = useCallback((acceptedFiles) => {\n      //   // Loop through accepted files\n      //   acceptedFiles.map((file) => {\n      //     // Initialize FileReader browser API\n      //     const reader = new FileReader();\n      //     // onload callback gets called after the reader reads the file data\n      //     reader.onload = function (e) {\n      //       // add the image into the state. Since FileReader reading process is asynchronous, its better to get the latest snapshot state (i.e., prevState) and update it.\n      //       setImage((prevState) => [\n      //         ...prevState,\n      //         { id: cuid(), src: e.target.result },\n      //       ]);\n      //       setIsImage(true);\n      //       //  console.log(image_);\n      //       setTempImage(e.target.result)\n      //     };\n      //     // Read the file as Data URL (since we accept only images)\n      //     reader.readAsDataURL(file);\n      //     // setIsImage(true);\n      //     return file;\n      //   });\n      // }, []);\n\n      const handleSubmit = e => {\n        e.preventDefault();\n        const experience = {\n          year,\n          category,\n          discription,\n          hours,\n          refName,\n          refContact,\n          isHighlight,\n          id: cuid()\n        }; //add all the form fields here\n        // console.log(\"jhgfhgfdhgfdhgf\")\n        // console.log(image_)\n        // const image={\n        //   uid,\n        //   eid,\n        //   iLink:image_,\n        //   id:cuid()\n        // }\n\n        this.props.createExperiece(this.experience); // fetch(\"http://localhost:8000/experiences/\", {\n        //   method: \"POST\",\n        //   headers: { \"Content-Type\": \"application/json\" },\n        //   body: JSON.stringify(experience),\n        // }).then(() => {\n        //   console.log(\"uploaded to server succesfully\");\n        //   //what to do next....eg: history.push('/');\n        // });\n        // fetch(\"//http://localhost:8000/images/\", {\n        //   method: \"POST\",\n        //   headers: { \"Content-Type\": \"application/json\" },\n        //   body: JSON.stringify(image),\n        // }).then(() => {\n        //   console.log(\"uploaded to server succesfully\");\n        //   //what to do next....eg: history.push('/');\n        // });\n      }; // useEffect(()=>{\n      //   console.log(\"this happened because of image\");\n      //   console.log(image_);\n      // },[image_])\n\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"FormInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Transcript Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"\",\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"\",\n            children: \"Year:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: year,\n            onChange: e => setYear({\n              year: e.state.value\n            }),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"year1\",\n              children: \"2018\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"year2\",\n              children: \"2019\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"year3\",\n              children: \"2020\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"year4\",\n              children: \"2021\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Add to transcript\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 5\n      }, this);\n    }, \"/cfI9OEn6WB9UrCPR631I+i4+qc=\");\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    createExperiece: experience => dispatch(createExperiece(experience))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(InputForm);","map":{"version":3,"sources":["/Users/leftee/Documents/GitHub/transcript_ashesi_/src/Components/SideForm/InputForm.js"],"names":["React","Component","useState","DragAndDrop","createExperiece","connect","cuid","Highlight","UploadedImage","InputForm","render","discription","setDiscriptiion","hours","setHours","refName","setRefName","refContact","setRefContact","year","setYear","category","setCategory","tempImage","setTempImage","isHighlight","setIsHighlight","isImage","setIsImage","image_","setImage","handleSubmit","e","preventDefault","experience","id","props","state","value","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React,{ Component,useState} from \"react\";\nimport DragAndDrop from \"../DragAndDrop\";\nimport { createExperiece } from \"../../Redux/actions/experienceActions\";\nimport { connect } from \"react-redux\";\n// cuid is a simple library to generate unique IDs\nimport cuid from \"cuid\";\nimport \"./InputForm.css\";\nimport { Highlight } from \"@material-ui/icons\";\nimport UploadedImage from \"../UploadedImage\";\n// import { Component } from \"react\";\n\n// function InputForm() {\n//     return (\n//         <div>\n//             this is the form section\n//         </div>\n//     )\n// }\n\nclass InputForm extends Component {\n  render=()=>{\n    // this.state={\n    //   hours:\"\",\n    //   refName:\"\",\n    //   discription:\"\",\n    //   refContact:\"\",\n    //   year:\"2018\",\n    //   category:\"SCHOLARSHIP\",\n    //   isHighlight:false,\n    //   //image_:\"\"\n    // };\n  const [discription, setDiscriptiion] = useState(\"\"); //add all the elemetns later\n  const [hours, setHours] = useState(\"\");\n  const [refName, setRefName] = useState(\"\");\n  const [refContact, setRefContact] = useState(\"\");\n  const [year, setYear] = useState(\"2018\");\n  const [category, setCategory] = useState(\"SCHORLASHIP\");\n  const [tempImage,setTempImage] = useState(\"\");\n\n  const [isHighlight, setIsHighlight] = useState(false);\n  const [isImage,setIsImage]=useState(false);\n  const [image_, setImage] = useState([]); //   const [isHighlight, setHighlight] = useState(false); //false\n\n  // const onDrop = useCallback((acceptedFiles) => {\n  //   // Loop through accepted files\n  //   acceptedFiles.map((file) => {\n  //     // Initialize FileReader browser API\n  //     const reader = new FileReader();\n  //     // onload callback gets called after the reader reads the file data\n  //     reader.onload = function (e) {\n  //       // add the image into the state. Since FileReader reading process is asynchronous, its better to get the latest snapshot state (i.e., prevState) and update it.\n  //       setImage((prevState) => [\n  //         ...prevState,\n  //         { id: cuid(), src: e.target.result },\n  //       ]);\n  //       setIsImage(true);\n  //       //  console.log(image_);\n  //       setTempImage(e.target.result)\n\n  //     };\n  //     // Read the file as Data URL (since we accept only images)\n  //     reader.readAsDataURL(file);\n  //     // setIsImage(true);\n  //     return file;\n  //   });\n  // }, []);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const experience = {\n \n      year,\n      category,\n      discription,\n      hours,\n      refName,\n      refContact,\n      isHighlight,\n      id:cuid()\n   \n      \n    }; //add all the form fields here\n    // console.log(\"jhgfhgfdhgfdhgf\")\n    // console.log(image_)\n    // const image={\n    //   uid,\n    //   eid,\n    //   iLink:image_,\n    //   id:cuid()\n\n    // }\n    this.props.createExperiece(this.experience)\n    \n\n    // fetch(\"http://localhost:8000/experiences/\", {\n    //   method: \"POST\",\n    //   headers: { \"Content-Type\": \"application/json\" },\n    //   body: JSON.stringify(experience),\n    // }).then(() => {\n    //   console.log(\"uploaded to server succesfully\");\n    //   //what to do next....eg: history.push('/');\n    // });\n\n    // fetch(\"//http://localhost:8000/images/\", {\n    //   method: \"POST\",\n    //   headers: { \"Content-Type\": \"application/json\" },\n    //   body: JSON.stringify(image),\n    // }).then(() => {\n    //   console.log(\"uploaded to server succesfully\");\n    //   //what to do next....eg: history.push('/');\n    // });\n\n  };\n\n    // useEffect(()=>{\n    //   console.log(\"this happened because of image\");\n    //   console.log(image_);\n    // },[image_])\n\n  return (\n    <div className=\"FormInput\">\n      <h3>Transcript Data</h3>\n      <form className=\"\" onSubmit={handleSubmit}>\n        <label className=\"\">Year:</label>\n        <select value={year} onChange={(e) => setYear({year:e.state.value})}>\n          <option value=\"year1\">2018</option>\n          <option value=\"year2\">2019</option>\n          <option value=\"year3\">2020</option>\n          <option value=\"year4\">2021</option>\n        </select>\n        {/* <label className=\"\">Category:</label>\n        <select value={this.state.category} onChange={(e) => this.setState({category:e.target.value})}>\n          <option value=\"cat1\">LEADERSHIP</option>\n          <option value=\"cat2\">CITIZENSHIP</option>\n          <option value=\"cat3\">SCHOLARSHIP</option>\n        </select>\n        <label className=\"\">Brief Discription:</label>\n        <input\n          type=\"text\"\n          required\n          maxLength={\"120\"}\n          value={this.state.discription}\n          onChange={(e) => this.setState({discription:e.target.value})}\n        />\n        <label className=\"\">Number of Hours:</label>\n        <input\n          type=\"number\"\n          required\n          value={this.state.hours}\n          onChange={(e) => this.setState({hours:e.target.value})}\n        />\n        <label className=\"\">Reference Name:</label>\n        <input\n          type=\"text\"\n          required\n          value={this.state.refName}\n          onChange={(e) => this.setState({refName:e.target.value})}\n        />\n        <label className=\"\">Reference Contact:</label>\n        <input\n          type=\"email\"\n          required\n          maxLength={\"40\"}\n          value={this.state.refContact}\n          onChange={(e) => this.setState({refContact:e.target.value})}\n        />\n        <label className=\"\">Add as a major Highlight:</label>\n        <label className=\"switch\">\n          <input\n            type=\"checkbox\"\n            value={this.state.isHighlight}\n            onChange={(e) => this.setState({isHighlight:(prevState) => !prevState})} //(e.target.value)}\n          />\n          <span className=\"slider round\"></span>\n        </label> */}\n\n        {/* {this.state.isHighlight && (\n          <div>\n            <DragAndDrop onChange={(e)=>setImage(e.target.value)} onDrop={onDrop} accept={\"image/*\"} />\n            {isImage && <UploadedImage image={temp}/>}\n          </div>\n           \n        )}\n         */}\n\n        {/* <label className=\"\">Add Data to Transcript</label> */}\n        <button>Add to transcript</button>\n      </form>\n    </div>\n  );\n};\n  }\n  \nconst mapDispatchToProps=(dispatch)=>{\n   return{\n     createExperiece :(experience)=>dispatch(createExperiece(experience))\n   }\n}\nexport default connect(null,mapDispatchToProps)(InputForm);\n"]},"metadata":{},"sourceType":"module"}